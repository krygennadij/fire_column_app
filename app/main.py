import sys
import os
import json # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON
import math
import pandas as pd
import matplotlib.pyplot as plt
import altair as alt
import streamlit as st
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (fire_column_app) –≤ sys.path
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç Python –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–∞–∫–µ—Ç 'app'
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__)) # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É (app/main.py)
PROJECT_ROOT = os.path.dirname(SCRIPT_DIR) # –ü—É—Ç—å –∫ fire_column_app/
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from app.utils import calc_section, calc_capacity, discretize_concrete_core_into_rings, steel_ring_area, steel_working_condition_coeff, concrete_working_condition_coeff, concrete_strain_by_temp

# –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤:
def get_reduction_coeff(slenderness):
    table = [
        (0.0, 1.0),
        (0.2, 1.0),
        (0.4, 0.9),
        (0.6, 0.785),
        (0.8, 0.6),
        (1.0, 0.54),
        (1.2, 0.43),
        (1.4, 0.36),
        (1.6, 0.285),
        (1.8, 0.24),
        (2.0, 0.2),
        (2.2, 0.17),
        (2.4, 0.15),
        (2.6, 0.125),
        (2.8, 0.11),
        (3.0, 0.1),
    ]
    if slenderness <= table[0][0]:
        return table[0][1]
    if slenderness >= table[-1][0]:
        return table[-1][1]
    for i in range(1, len(table)):
        x0, y0 = table[i-1]
        x1, y1 = table[i]
        if x0 <= slenderness <= x1:
            return y0 + (y1 - y0) * (slenderness - x0) / (x1 - x0)
    return table[-1][1]

# 1. st.set_page_config() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π Streamlit
st.set_page_config(page_title="–†–∞—Å—á—ë—Ç –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ —Å—Ç–∞–ª–µ—Ç—Ä—É–±–æ–±–µ—Ç–æ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–Ω—ã", page_icon="üî•", layout="wide")

# --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.markdown('<div style="text-align:center; font-size:2em; font-weight:700; font-family:Segoe UI, Arial, sans-serif; margin-bottom:0.7em; margin-top:0.2em;">üî• –†–∞—Å—á—ë—Ç –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ —Å—Ç–∞–ª–µ—Ç—Ä—É–±–æ–±–µ—Ç–æ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–Ω—ã</div>', unsafe_allow_html=True)

with st.sidebar:
    st.header("–í–≤–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    diameter = st.number_input("–ù–∞—Ä—É–∂–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä, –º–º", min_value=200.0, max_value=500.0, value=244.5, step=0.1)
    thickness = st.number_input("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–∞–ª—å–Ω–æ–π —Å—Ç–µ–Ω–∫–∏, –º–º", min_value=3.0, max_value=9.0, value=6.3, step=0.1)
    steel_strength_normative = st.number_input("–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, –ú–ü–∞", min_value=200, max_value=600, value=355)
    steel_elastic_modulus = st.number_input("–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, –ú–ü–∞", min_value=180000, max_value=220000, value=210000)
    concrete_strength_normative = st.number_input("–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, –ú–ü–∞", min_value=10.0, max_value=60.0, value=42.0, step=0.1)
    height = st.number_input("–í—ã—Å–æ—Ç–∞ –∫–æ–ª–æ–Ω–Ω—ã, –º", min_value=1.0, max_value=20.0, value=3.4, step=0.1)
    effective_length_coefficient = st.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–π –¥–ª–∏–Ω—ã", min_value=0.5, max_value=2.0, value=0.7, step=0.1)
    normative_load = st.number_input("–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –∫–ù", min_value=10.0, max_value=10000.0, value=635.0, step=0.1)
    fire_exposure_time = st.number_input("–í—Ä–µ–º—è –æ–≥–Ω–µ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è, –º–∏–Ω", min_value=0, max_value=240, value=60, step=5)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
def load_thermal_data():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ thermal_data
    thermal_dir = Path(PROJECT_ROOT) / "thermal_data"
    
    if not thermal_dir.exists():
        st.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {thermal_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return {}
        
    thermal_files = list(thermal_dir.glob("*.json"))
    if not thermal_files:
        st.error(f"JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {thermal_dir}!")
        return {}
    
    thermal_data = {}
    for file in thermal_files:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            # –ò–º—è —Ñ–∞–π–ª–∞ –≤–∏–¥–∞ "200x3.json" -> –¥–∏–∞–º–µ—Ç—Ä 200, —Ç–æ–ª—â–∏–Ω–∞ 3
            name = file.stem
            diameter, thickness = map(int, name.split('x'))
            thermal_data[(diameter, thickness)] = data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")
            
    return thermal_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–∞–º
def get_closest_thermal_data(thermal_data, diameter, thickness):
    if not thermal_data:
        st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        return None
        
    available_diameters = sorted(set(d for d, _ in thermal_data.keys()))
    available_thicknesses = sorted(set(t for _, t in thermal_data.keys()))
    
    if not available_diameters or not available_thicknesses:
        st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        return None
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–∏–∞–º–µ—Ç—Ä
    closest_diameter = min(available_diameters, key=lambda d: abs(d - diameter))
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ–ª—â–∏–Ω—É
    closest_thickness = min(available_thicknesses, key=lambda t: abs(t - thickness))
    
    st.info(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ {closest_diameter} –º–º –∏ —Ç–æ–ª—â–∏–Ω—ã {closest_thickness} –º–º")
    
    return thermal_data.get((closest_diameter, closest_thickness), None)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
thermal_data = load_thermal_data()
closest_data = get_closest_thermal_data(thermal_data, diameter, thickness)

if closest_data:
    st.toast(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ {diameter} –º–º –∏ —Ç–æ–ª—â–∏–Ω—ã {thickness} –º–º", icon="‚úÖ")
else:
    st.toast("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", icon="‚ùå")

# –†–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –±–µ—Ç–æ–Ω–Ω–æ–≥–æ —è–¥—Ä–∞ –Ω–∞ –∫–æ–ª—å—Ü–∞
fire_exposure_time_sec = fire_exposure_time * 60
concrete_rings_details = discretize_concrete_core_into_rings(
    diameter, 
    thickness, 
    closest_data, 
    fire_exposure_time_sec,
    num_rings=5,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 5 –∫–æ–ª–µ—Ü
    ring_thicknesses=[10, 20, 20, 20, None]  # –ó–∞–¥–∞–µ–º —Ç–æ–ª—â–∏–Ω—ã –∫–æ–ª–µ—Ü, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ–ª—å—Ü–æ –∑–∞–π–º–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
)
temp_steel = None
if closest_data:
    suitable_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float)) and r.get('time_minutes', -1) <= fire_exposure_time_sec]
    if suitable_records:
        thermal_record = max(suitable_records, key=lambda x: x.get('time_minutes', -1))
    else:
        all_time_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float))]
        if all_time_records:
            thermal_record = min(all_time_records, key=lambda x: x.get('time_minutes', float('inf')))
        else:
            thermal_record = None
    if thermal_record:
        temp_steel = thermal_record.get('temp_t1')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
N_cr_for_summary_table = None
slenderness_for_summary_table = None
reduction_coeff_for_summary_table = None
N_final_for_summary_table = None

# –°—É–º–º–∏—Ä—É–µ–º –∂—ë—Å—Ç–∫–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–ª–µ—Ü (–±–µ—Ç–æ–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–ª—å–Ω–æ–≥–æ) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ fire_exposure_time
total_stiffness = 0.0
if concrete_rings_details:
    for ring in concrete_rings_details:
        R_out = ring['outer_radius_mm']
        R_in = ring['inner_radius_mm']
        I_ring = (math.pi / 4) * (R_out**4 - R_in**4) / 1e12  # –º^4
        if ring['temperature_celsius'] is not None:
            gamma_bt = concrete_working_condition_coeff(ring['temperature_celsius'])
            f_cd_fire = gamma_bt * concrete_strength_normative
            strain = concrete_strain_by_temp(ring['temperature_celsius'])
            if strain and strain > 0:
                E_c_fire = f_cd_fire / (strain * 1e-3)
                total_stiffness += I_ring * E_c_fire * 1e3  # –∫–ù¬∑–º¬≤
if temp_steel is not None and isinstance(temp_steel, (int, float)):
    gamma_st = steel_working_condition_coeff(temp_steel)
    E_steel_fire = steel_elastic_modulus * gamma_st
    R_out_steel = diameter / 2
    R_in_steel = R_out_steel - thickness
    I_steel_ring = (math.pi / 4) * (R_out_steel**4 - R_in_steel**4) / 1e12  # –º^4
    total_stiffness += I_steel_ring * E_steel_fire * 1e3  # –∫–ù¬∑–º¬≤

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ fire_exposure_time
if total_stiffness > 0 and height > 0 and effective_length_coefficient > 0:
    # –≠—Ç–æ N_cr –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    N_cr_for_summary_table = (math.pi ** 2) * total_stiffness / ((height * effective_length_coefficient) ** 2)
    
# –°—É–º–º–∏—Ä—É–µ–º –Ω–µ—Å—É—â–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–ª–µ—Ü –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ fire_exposure_time
N_total = 0.0 # N_total —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è fire_exposure_time –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
if concrete_rings_details:
    for ring in concrete_rings_details:
        if ring['area_mm2'] is not None and ring['temperature_celsius'] is not None:
            gamma_bt = concrete_working_condition_coeff(ring['temperature_celsius'])
            f_cd_fire = gamma_bt * concrete_strength_normative
            area_m2 = ring['area_mm2'] / 1e6
            N_ring = area_m2 * f_cd_fire * 1e3  # –∫–ù
            N_total += N_ring
if temp_steel is not None and isinstance(temp_steel, (int, float)):
    area_steel_ring = steel_ring_area(diameter, thickness)
    gamma_st = steel_working_condition_coeff(temp_steel) if temp_steel is not None else None
    f_yd_fire = gamma_st * steel_strength_normative if gamma_st is not None else None
    E_steel_fire = steel_elastic_modulus * gamma_st if gamma_st is not None else None
    R_out_steel = diameter / 2
    R_in_steel = R_out_steel - thickness
    I_steel_ring = (math.pi / 4) * (R_out_steel**4 - R_in_steel**4) / 1e12
    area_steel_ring = steel_ring_area(diameter, thickness)
    N_steel_ring = area_steel_ring / 1e6 * f_yd_fire * 1e3 if (f_yd_fire is not None) else 0.0
    N_total += N_steel_ring

# –£—Å–ª–æ–≤–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å –∏ –∏—Ç–æ–≥–æ–≤–∞—è –Ω–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ fire_exposure_time
if N_cr_for_summary_table is not None and N_cr_for_summary_table > 0:
    slenderness_for_summary_table = math.sqrt(N_total / N_cr_for_summary_table)
    reduction_coeff_for_summary_table = get_reduction_coeff(slenderness_for_summary_table)
    N_final_for_summary_table = N_total * reduction_coeff_for_summary_table

# –ì—Ä–∞—Ñ–∏–∫ –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–Ω—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
if closest_data:
    times = sorted(set(int(r['time_minutes'])//60 for r in closest_data if isinstance(r.get('time_minutes'), (int, float))))
    times = [t for t in range(0, max(times)+1)] if times else [0]
    N_final_list = []
    for t_min in times:
        t_sec = t_min * 60
        # –ü–æ–ª—É—á–∞–µ–º thermal_record –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        suitable_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float)) and r.get('time_minutes', -1) <= t_sec]
        if suitable_records:
            thermal_record = max(suitable_records, key=lambda x: x.get('time_minutes', -1))
        else:
            all_time_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float))]
            if all_time_records:
                thermal_record = min(all_time_records, key=lambda x: x.get('time_minutes', float('inf')))
            else:
                thermal_record = None
        # –ü–µ—Ä–µ—Å—á—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        # –ë–µ—Ç–æ–Ω–Ω—ã–µ –∫–æ–ª—å—Ü–∞
        N_total = 0.0
        total_stiffness = 0.0
        for i in range(5):  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 6 –Ω–∞ 5 –∫–æ–ª–µ—Ü
            # –†–∞–¥–∏—É—Å—ã
            column_radius_mm = diameter / 2.0
            concrete_core_outer_radius_mm = column_radius_mm - thickness
            nominal_thicknesses_mm = [10.0, 20.0, 20.0, 20.0, None]  # –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—â–∏–Ω—ã
            if i < 4:  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 5 –Ω–∞ 4
                outer_r = concrete_core_outer_radius_mm - sum(t for t in nominal_thicknesses_mm[:i] if t is not None)
                inner_r = max(0.0, outer_r - (nominal_thicknesses_mm[i] if nominal_thicknesses_mm[i] is not None else outer_r))
            else:
                outer_r = concrete_core_outer_radius_mm - sum(t for t in nominal_thicknesses_mm[:i] if t is not None)
                inner_r = 0.0
            area = math.pi * (outer_r**2 - inner_r**2) if outer_r > inner_r else 0.0
            temp = None
            if thermal_record:
                temp = thermal_record.get(f'temp_t{i+2}')  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å i+1 –Ω–∞ i+2 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            gamma_bt = concrete_working_condition_coeff(temp) if temp is not None else None
            f_cd_fire = gamma_bt * concrete_strength_normative if gamma_bt is not None else None
            strain = concrete_strain_by_temp(temp) if temp is not None else None
            E_c_fire = f_cd_fire / (strain * 1e-3) if (f_cd_fire is not None and strain and strain > 0) else None
            I_ring = (math.pi / 4) * (outer_r**4 - inner_r**4) / 1e12 if outer_r > inner_r else 0.0
            N_ring = area / 1e6 * f_cd_fire * 1e3 if (area > 0 and f_cd_fire is not None) else 0.0
            stiffness = I_ring * E_c_fire * 1e3 if (I_ring and E_c_fire) else 0.0
            N_total += N_ring
            total_stiffness += stiffness
        # –°—Ç–∞–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ
        temp_steel = thermal_record.get('temp_t1') if thermal_record else None
        gamma_st = steel_working_condition_coeff(temp_steel) if temp_steel is not None else None
        f_yd_fire = gamma_st * steel_strength_normative if gamma_st is not None else None
        E_steel_fire = steel_elastic_modulus * gamma_st if gamma_st is not None else None
        R_out_steel = diameter / 2
        R_in_steel = R_out_steel - thickness
        I_steel_ring = (math.pi / 4) * (R_out_steel**4 - R_in_steel**4) / 1e12
        area_steel_ring = steel_ring_area(diameter, thickness)
        N_steel_ring = area_steel_ring / 1e6 * f_yd_fire * 1e3 if (f_yd_fire is not None) else 0.0
        stiffness_steel = I_steel_ring * E_steel_fire * 1e3 if (E_steel_fire is not None) else 0.0
        N_total += N_steel_ring
        total_stiffness += stiffness_steel
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞
        N_cr = (math.pi ** 2) * total_stiffness / ((height * effective_length_coefficient) ** 2) if (total_stiffness > 0 and height > 0 and effective_length_coefficient > 0) else 0.0
        # –£—Å–ª–æ–≤–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å
        slenderness = math.sqrt(N_total / N_cr) if N_cr > 0 else 0.0
        reduction_coeff = get_reduction_coeff(slenderness)
        N_final = N_total * reduction_coeff
        N_final_list.append(N_final)
    # –ì—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(6,9))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å 4.5 –¥–æ 9
    ax.plot(times, N_final_list, marker='o', color='crimson')
    ax.set_xlabel('–í—Ä–µ–º—è, –º–∏–Ω')
    ax.set_ylabel('–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª–æ–Ω–Ω—ã, –∫–ù')
    ax.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–ª–æ–Ω–Ω—ã –æ—Ç –≤—Ä–µ–º–µ–Ω–∏')
    ax.grid(True, linestyle='--', alpha=0.5)


# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ table_data_list —Å –µ–¥–∏–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ ---
table_data_list = []
# –î–∞–Ω–Ω—ã–µ –ø–æ –±–µ—Ç–æ–Ω–Ω—ã–º –∫–æ–ª—å—Ü–∞–º
if concrete_rings_details:
    for i, ring_detail in enumerate(concrete_rings_details):
        R_out_mm_c = ring_detail['outer_radius_mm']
        R_in_mm_c = ring_detail['inner_radius_mm']
        area_mm2_c = ring_detail['area_mm2']
        temp_c_c = ring_detail['temperature_celsius']
        gamma_bt_c = None
        f_cd_fire_mpa_c = None
        strain_c_permille = None
        E_c_fire_mpa_c = None
        N_ring_kn_c = None
        I_ring_m4_c = (math.pi / 4) * (R_out_mm_c**4 - R_in_mm_c**4) / 1e12 if R_out_mm_c > R_in_mm_c else 0.0
        stiffness_ring_knm2_c = None
        if temp_c_c is not None:
            gamma_bt_c = concrete_working_condition_coeff(temp_c_c)
            if gamma_bt_c is not None:
                f_cd_fire_mpa_c = gamma_bt_c * concrete_strength_normative
            strain_c_permille = concrete_strain_by_temp(temp_c_c)
            if strain_c_permille is not None and strain_c_permille > 0 and f_cd_fire_mpa_c is not None:
                E_c_fire_mpa_c = f_cd_fire_mpa_c / (strain_c_permille / 1000)
        if area_mm2_c is not None and f_cd_fire_mpa_c is not None:
            N_ring_kn_c = (area_mm2_c / 1e6) * f_cd_fire_mpa_c * 1e3
        if I_ring_m4_c != 0 and E_c_fire_mpa_c is not None:
            stiffness_ring_knm2_c = I_ring_m4_c * E_c_fire_mpa_c * 1e3
        table_data_list.append({
            "‚Ññ": f"–ë{i+1}",
            "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º": f"{R_out_mm_c:.1f}",
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º": f"{R_in_mm_c:.1f}",
            "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤": f"{area_mm2_c:.1f}" if area_mm2_c is not None else "N/A",
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C": f"{temp_c_c:.1f}" if temp_c_c is not None else "N/A",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –±–µ—Ç–æ–Ω–∞, Œ≥<sub>bt</sub>": f"{gamma_bt_c:.3f}" if gamma_bt_c is not None else "N/A",
            "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, R<sub>bu</sub>, –ú–ü–∞": f"{f_cd_fire_mpa_c:.1f}" if f_cd_fire_mpa_c is not None else "N/A",
            "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞, Œµ<sub>yn,t</sub>": f"{strain_c_permille:.2f}" if strain_c_permille is not None else "N/A",
            "–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞, E<sub>b,t</sub>, –ú–ü–∞": f"{E_c_fire_mpa_c:.0f}" if E_c_fire_mpa_c is not None else "N/A",
            "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥": f"{I_ring_m4_c:.2e}",
            "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù": f"{N_ring_kn_c:.1f}" if N_ring_kn_c is not None else "N/A",
            "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤": f"{stiffness_ring_knm2_c:.1f}" if stiffness_ring_knm2_c is not None else "N/A",
        })
# –î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞–ª—å–Ω–æ–º—É –∫–æ–ª—å—Ü—É
s_temp_steel = None
if closest_data:
    suitable_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float)) and r.get('time_minutes', -1) <= fire_exposure_time_sec]
    if suitable_records:
        s_thermal_record = max(suitable_records, key=lambda x: x.get('time_minutes', -1))
    else:
        all_time_records = [r for r in closest_data if isinstance(r.get('time_minutes'), (int, float))]
        if all_time_records:
            s_thermal_record = min(all_time_records, key=lambda x: x.get('time_minutes', float('inf')))
        else:
            s_thermal_record = None
    if s_thermal_record:
        s_temp_steel = s_thermal_record.get('temp_t1')
s_gamma_st = None
s_f_yd_fire_mpa = None
s_E_steel_fire_mpa = None
s_N_steel_ring_kn = None
s_stiffness_steel_knm2 = None
s_area_mm2 = steel_ring_area(diameter, thickness)
s_R_out_mm = diameter / 2.0
s_R_in_mm = s_R_out_mm - thickness
s_I_steel_ring_m4 = (math.pi / 4) * (s_R_out_mm**4 - s_R_in_mm**4) / 1e12
if s_temp_steel is not None and isinstance(s_temp_steel, (int, float)):
    s_gamma_st = steel_working_condition_coeff(s_temp_steel)
    if s_gamma_st is not None:
        s_f_yd_fire_mpa = s_gamma_st * steel_strength_normative
        s_E_steel_fire_mpa = steel_elastic_modulus * s_gamma_st
if s_area_mm2 is not None and s_f_yd_fire_mpa is not None:
    s_N_steel_ring_kn = (s_area_mm2 / 1e6) * s_f_yd_fire_mpa * 1e3
if s_I_steel_ring_m4 != 0 and s_E_steel_fire_mpa is not None:
    s_stiffness_steel_knm2 = s_I_steel_ring_m4 * s_E_steel_fire_mpa * 1e3
table_data_list.append({
    "‚Ññ": "–°—Ç",
    "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º": f"{s_R_out_mm:.1f}",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º": f"{s_R_in_mm:.1f}",
    "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤": f"{s_area_mm2:.1f}" if s_area_mm2 is not None else "N/A",
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C": f"{s_temp_steel:.1f}" if s_temp_steel is not None else "N/A",
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–ª–∏, Œ≥<sub>st</sub>": f"{s_gamma_st:.3f}" if s_gamma_st is not None else "N/A",
    "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, R<sub>su</sub>, –ú–ü–∞": f"{s_f_yd_fire_mpa:.1f}" if s_f_yd_fire_mpa is not None else "N/A",
    "–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, E<sub>s,t</sub>, –ú–ü–∞": f"{s_E_steel_fire_mpa:.0f}" if s_E_steel_fire_mpa is not None else "N/A",
    "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥": f"{s_I_steel_ring_m4:.2e}",
    "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù": f"{s_N_steel_ring_kn:.1f}" if s_N_steel_ring_kn is not None else "N/A",
    "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤": f"{s_stiffness_steel_knm2:.1f}" if s_stiffness_steel_knm2 is not None else "N/A",
})
# --- –ï–¥–∏–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ ---
concrete_columns = [
    "‚Ññ",
    "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º",
    "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤",
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C",
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –±–µ—Ç–æ–Ω–∞, Œ≥<sub>bt</sub>",
    "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, R<sub>bu</sub>, –ú–ü–∞",
    "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞, Œµ<sub>yn,t</sub>",
    "–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞, E<sub>b,t</sub>, –ú–ü–∞",
    "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥",
    "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù",
    "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤",
]
steel_columns = [
    "‚Ññ",
    "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º",
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º",
    "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤",
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C",
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–ª–∏, Œ≥<sub>st</sub>",
    "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, R<sub>su</sub>, –ú–ü–∞",
    "–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, E<sub>s,t</sub>, –ú–ü–∞",
    "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥",
    "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù",
    "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤",
]
# --- header_map —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ ---
header_map = {
    "‚Ññ": ("–ù–æ–º–µ—Ä<br>–∫–æ–ª—å—Ü–∞", ""),
    "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º": ("–ù–∞—Ä—É–∂–Ω—ã–π<br>—Ä–∞–¥–∏—É—Å", "R<sub>–Ω–∞—Ä</sub>, –º–º"),
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º": ("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π<br>—Ä–∞–¥–∏—É—Å", "R<sub>–≤–Ω</sub>, –º–º"),
    "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤": ("–ü–ª–æ—â–∞–¥—å<br>—Å–µ—á–µ–Ω–∏—è", "A, –º–º¬≤"),
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C": ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "T, ¬∞C"),
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –±–µ—Ç–æ–Ω–∞, Œ≥<sub>bt</sub>": ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç<br>—É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã<br>–±–µ—Ç–æ–Ω–∞", "Œ≥<sub>bt</sub>"),
    "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, R<sub>bu</sub>, –ú–ü–∞": ("–†–∞—Å—á—ë—Ç–Ω–æ–µ<br>—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ<br>–±–µ—Ç–æ–Ω–∞", "R<sub>bu</sub>, –ú–ü–∞"),
    "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞, Œµ<sub>yn,t</sub>": ("–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è<br>–±–µ—Ç–æ–Ω–∞", "Œµ<sub>yn,t</sub>"),
    "–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞, E<sub>b,t</sub>, –ú–ü–∞": ("–ú–æ–¥—É–ª—å<br>–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏<br>–±–µ—Ç–æ–Ω–∞", "E<sub>b,t</sub>, –ú–ü–∞"),
    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–ª–∏, Œ≥<sub>st</sub>": ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç<br>—É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã<br>—Å—Ç–∞–ª–∏", "Œ≥<sub>st</sub>"),
    "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, R<sub>su</sub>, –ú–ü–∞": ("–†–∞—Å—á—ë—Ç–Ω–æ–µ<br>—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ<br>—Å—Ç–∞–ª–∏", "R<sub>su</sub>, –ú–ü–∞"),
    "–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, E<sub>s,t</sub>, –ú–ü–∞": ("–ú–æ–¥—É–ª—å<br>—É–ø—Ä—É–≥–æ—Å—Ç–∏<br>—Å—Ç–∞–ª–∏", "E<sub>s,t</sub>, –ú–ü–∞"),
    "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥": ("–ú–æ–º–µ–Ω—Ç<br>–∏–Ω–µ—Ä—Ü–∏–∏", "I, –º‚Å¥"),
    "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù": ("–ù–µ—Å—É—â–∞—è<br>—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å<br>–∫–æ–ª—å—Ü–∞", "N<sub>p,t</sub>, –∫–ù"),
    "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤": ("–ñ—ë—Å—Ç–∫–æ—Å—Ç—å<br>–∫–æ–ª—å—Ü–∞", "EI, –∫–ù¬∑–º¬≤"),
}

df = pd.DataFrame(table_data_list)
# –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è df —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
# –û–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ: st.dataframe(df, ...)

# --- UI: –í–∫–ª–∞–¥–∫–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω ---
tab1, tab2, tab3 = st.tabs([
    "üßÆ –†–∞—Å—á—ë—Ç –ø–æ –∫–æ–ª—å—Ü–∞–º",
    "üìà –ì—Ä–∞—Ñ–∏–∫ –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
    "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"
])

with tab1:
    # --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ---
    table_title_style = 'style="text-align:center; font-size:1.25em; font-weight:700; font-family:Segoe UI, Arial, sans-serif; margin-bottom:0.5em; margin-top:0.5em;"'
    if 'df' in locals() and not df.empty:
        df_concrete = df[df['‚Ññ'] != '–°—Ç'].copy()
        df_steel = df[df['‚Ññ'] == '–°—Ç'].copy()
        # --- –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤: –Ω–∞—Ä—É–∂–Ω—ã–π, –ø–æ—Ç–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ---
        concrete_columns = [
            "‚Ññ",
            "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º",
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º",
            "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤",
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –±–µ—Ç–æ–Ω–∞, Œ≥<sub>bt</sub>",
            "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, R<sub>bu</sub>, –ú–ü–∞",
            "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞, Œµ<sub>yn,t</sub>",
            "–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞, E<sub>b,t</sub>, –ú–ü–∞",
            "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥",
            "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù",
            "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤",
        ]
        steel_columns = [
            "‚Ññ",
            "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º",
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º",
            "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤",
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–ª–∏, Œ≥<sub>st</sub>",
            "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, R<sub>su</sub>, –ú–ü–∞",
            "–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, E<sub>s,t</sub>, –ú–ü–∞",
            "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥",
            "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù",
            "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤",
        ]
        df_concrete = df_concrete[[col for col in concrete_columns if col in df_concrete.columns]]
        df_steel = df_steel[[col for col in steel_columns if col in df_steel.columns]]
        # ---
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤–µ—Ä–Ω—É–ª header_map)
        header_map = {
            "‚Ññ": ("‚Ññ<br>–∫–æ–ª—å—Ü–∞", ""),
            "–ù–∞—Ä—É–∂–Ω—ã–π —Ä–∞–¥–∏—É—Å, R<sub>–Ω–∞—Ä</sub>, –º–º": ("–ù–∞—Ä—É–∂–Ω—ã–π<br>—Ä–∞–¥–∏—É—Å", "R<sub>–Ω–∞—Ä</sub>, –º–º"),
            "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∞–¥–∏—É—Å, R<sub>–≤–Ω</sub>, –º–º": ("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π<br>—Ä–∞–¥–∏—É—Å", "R<sub>–≤–Ω</sub>, –º–º"),
            "–ü–ª–æ—â–∞–¥—å —Å–µ—á–µ–Ω–∏—è, A, –º–º¬≤": ("–ü–ª–æ—â–∞–¥—å<br>—Å–µ—á–µ–Ω–∏—è", "A, –º–º¬≤"),
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, T, ¬∞C": ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "T, ¬∞C"),
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã –±–µ—Ç–æ–Ω–∞, Œ≥<sub>bt</sub>": ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç<br>—É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã<br>–±–µ—Ç–æ–Ω–∞", "Œ≥<sub>bt</sub>"),
            "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –±–µ—Ç–æ–Ω–∞, R<sub>bu</sub>, –ú–ü–∞": ("–†–∞—Å—á—ë—Ç–Ω–æ–µ<br>—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ<br>–±–µ—Ç–æ–Ω–∞", "R<sub>bu</sub>, –ú–ü–∞"),
            "–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞, Œµ<sub>yn,t</sub>": ("–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è<br>–±–µ—Ç–æ–Ω–∞", "Œµ<sub>yn,t</sub>"),
            "–ú–æ–¥—É–ª—å –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞, E<sub>b,t</sub>, –ú–ü–∞": ("–ú–æ–¥—É–ª—å<br>–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏<br>–±–µ—Ç–æ–Ω–∞", "E<sub>b,t</sub>, –ú–ü–∞"),
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–ª–∏, Œ≥<sub>st</sub>": ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç<br>—É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã<br>—Å—Ç–∞–ª–∏", "Œ≥<sub>st</sub>"),
            "–†–∞—Å—á—ë—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–ª–∏, R<sub>su</sub>, –ú–ü–∞": ("–†–∞—Å—á—ë—Ç–Ω–æ–µ<br>—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ<br>—Å—Ç–∞–ª–∏", "R<sub>su</sub>, –ú–ü–∞"),
            "–ú–æ–¥—É–ª—å —É–ø—Ä—É–≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∏, E<sub>s,t</sub>, –ú–ü–∞": ("–ú–æ–¥—É–ª—å<br>—É–ø—Ä—É–≥–æ—Å—Ç–∏<br>—Å—Ç–∞–ª–∏", "E<sub>s,t</sub>, –ú–ü–∞"),
            "–ú–æ–º–µ–Ω—Ç –∏–Ω–µ—Ä—Ü–∏–∏, I, –º‚Å¥": ("–ú–æ–º–µ–Ω—Ç<br>–∏–Ω–µ—Ä—Ü–∏–∏", "I, –º‚Å¥"),
            "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, N<sub>p,t</sub>, –∫–ù": ("–ù–µ—Å—É—â–∞—è<br>—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å<br>–∫–æ–ª—å—Ü–∞", "N<sub>p,t</sub>, –∫–ù"),
            "–ñ—ë—Å—Ç–∫–æ—Å—Ç—å –∫–æ–ª—å—Ü–∞, EI, –∫–ù¬∑–º¬≤": ("–ñ—ë—Å—Ç–∫–æ—Å—Ç—å<br>–∫–æ–ª—å—Ü–∞", "EI, –∫–ù¬∑–º¬≤"),
        }
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–ª–µ—Ü
        st.markdown(f'<div {table_title_style}>–†–∞—Å—á—ë—Ç –±–µ—Ç–æ–Ω–Ω–æ–≥–æ —Å–µ—á–µ–Ω–∏—è</div>', unsafe_allow_html=True)
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–±–µ—Ç–æ–Ω–Ω—ã–µ –∫–æ–ª—å—Ü–∞)
        html = '''
        <style>
        .rings-table-wrapper { overflow-x: auto; }
        .rings-table {
            min-width: 900px;
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 6px 0 rgba(0,0,0,0.04);
            border: 1px solid #e0e0e0;
            font-size: 0.88em;
            table-layout: fixed;
        }
        .rings-table th {
            background: #f6f8fa;
            color: #222;
            font-weight: 600;
            padding: 10px 12px;
            border-bottom: 1.5px solid #eaecef;
            border-right: 1px solid #e0e0e0;
            white-space: normal;
            word-wrap: break-word;
        }
        .rings-table td {
            padding: 8px 12px;
            border-bottom: 1px solid #f0f0f0;
            color: #222;
            border-right: 1px solid #e0e0e0;
            text-align: center;
            white-space: normal;
            word-wrap: break-word;
        }
        .rings-table th:first-child,
        .rings-table td:first-child {
            width: 75px;
        }
        </style>
        <div class="rings-table-wrapper">
        <table class="rings-table">
        <tr>
        '''
        for col in df_concrete.columns:
            top, bottom = header_map.get(col, (col, ""))
            html += f'<th style="vertical-align:middle; padding-bottom:2px; text-align:center;">'
            html += f'<div style="font-weight:600; text-align:center; vertical-align:middle;">{top}</div>'
            if bottom:
                html += f'<div style="font-size:0.92em; color:#888; font-weight:400; text-align:center; vertical-align:middle;">{bottom}</div>'
            html += '</th>'
        html += '</tr>'
        for _, row in df_concrete.iterrows():
            html += '<tr>'
            for val in row:
                html += f'<td>{val}</td>'
            html += '</tr>'
        html += '</table></div>'
        st.markdown(html, unsafe_allow_html=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞
        if not df_steel.empty:
            st.markdown(f'<div {table_title_style}>–†–∞—Å—á—ë—Ç —Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞</div>', unsafe_allow_html=True)
            html2 = '''
            <style>
            .rings-table-wrapper { overflow-x: auto; }
            .rings-table {
                min-width: 900px;
                width: 100%;
                border-collapse: separate;
                border-spacing: 0;
                background: #fff;
                border-radius: 8px;
                box-shadow: 0 1px 6px 0 rgba(0,0,0,0.04);
                border: 1px solid #e0e0e0;
                font-size: 0.88em;
                table-layout: fixed;
            }
            .rings-table th {
                background: #f6f8fa;
                color: #222;
                font-weight: 600;
                padding: 10px 12px;
                border-bottom: 1.5px solid #eaecef;
                border-right: 1px solid #e0e0e0;
                white-space: normal;
                word-wrap: break-word;
            }
            .rings-table td {
                padding: 8px 12px;
                border-bottom: 1px solid #f0f0f0;
                color: #222;
                border-right: 1px solid #e0e0e0;
                text-align: center;
                white-space: normal;
                word-wrap: break-word;
            }
            .rings-table th:first-child,
            .rings-table td:first-child {
                width: 75px;
            }
            </style>
            <div class="rings-table-wrapper">
            <table class="rings-table">
            <tr>
            '''
            for col in df_steel.columns:
                top, bottom = header_map.get(col, (col, ""))
                html2 += f'<th style="vertical-align:middle; padding-bottom:2px; text-align:center;">'
                html2 += f'<div style="font-weight:600; text-align:center; vertical-align:middle;">{top}</div>'
                if bottom:
                    html2 += f'<div style="font-size:0.92em; color:#888; font-weight:400; text-align:center; vertical-align:middle;">{bottom}</div>'
                html2 += '</th>'
            html2 += '</tr>'
            for _, row in df_steel.iterrows():
                html2 += '<tr>'
                for val in row:
                    html2 += f'<td>{val}</td>'
                html2 += '</tr>'
            html2 += '</table></div>'
            st.markdown(html2, unsafe_allow_html=True)
    else:
        st.info("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–æ–ª—å—Ü–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–ª–∏—á–∏–µ thermal_data.json.")

    # --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
    st.markdown(f'<div {table_title_style}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</div>', unsafe_allow_html=True)
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π subheader
    summary_data_list = []
    if N_final_for_summary_table is not None:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª–æ–Ω–Ω—ã", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{N_final_for_summary_table:.1f} –∫–ù"})
    else:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–ª–æ–Ω–Ω—ã", "–ó–Ω–∞—á–µ–Ω–∏–µ": "N/A"})

    if N_cr_for_summary_table is not None:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{N_cr_for_summary_table:.1f} –∫–ù"})
    else:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ": "N/A"})

    if reduction_coeff_for_summary_table is not None:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ü–æ–Ω–∏–∂–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{reduction_coeff_for_summary_table:.3f}"})
    else:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–ü–æ–Ω–∏–∂–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–ó–Ω–∞—á–µ–Ω–∏–µ": "N/A"})
        
    if slenderness_for_summary_table is not None:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–£—Å–ª–æ–≤–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å", "–ó–Ω–∞—á–µ–Ω–∏–µ": f"{slenderness_for_summary_table:.3f}"})
    else:
        summary_data_list.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "–£—Å–ª–æ–≤–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å", "–ó–Ω–∞—á–µ–Ω–∏–µ": "N/A"})

    if summary_data_list:
        summary_table_html = '''
        <style>
        .summary-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 6px 0 rgba(0,0,0,0.04);
            border: 1px solid #e0e0e0;
            font-size: 1.08em;
        }
        .summary-table th {
            background: #f6f8fa;
            color: #222;
            font-weight: 600;
            padding: 12px 18px;
            border-bottom: 1.5px solid #eaecef;
            border-right: 1px solid #e0e0e0;
        }
        .summary-table th:last-child {
            border-right: none;
        }
        .summary-table td {
            padding: 10px 18px;
            border-bottom: 1px solid #f0f0f0;
            color: #222;
            border-right: 1px solid #e0e0e0;
        }
        .summary-table td:last-child {
            border-right: none;
        }
        .summary-table tr:last-child td {
            border-bottom: none;
        }
        /* –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∏ –æ–±–≤–æ–¥–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö —É–≥–ª–∞—Ö */
        .summary-table tr:first-child th:first-child {
            border-top-left-radius: 8px;
            border-left: 1px solid #e0e0e0;
            border-top: 1px solid #e0e0e0;
        }
        .summary-table tr:first-child th:last-child {
            border-top-right-radius: 8px;
            border-right: 1px solid #e0e0e0;
            border-top: 1px solid #e0e0e0;
        }
        .summary-table tr:last-child td:first-child {
            border-bottom-left-radius: 8px;
            border-left: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
        }
        .summary-table tr:last-child td:last-child {
            border-bottom-right-radius: 8px;
            border-right: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
        }
        .summary-table tr:hover td {
            background: #f0f6ff;
            transition: background 0.2s;
        }
        </style>
        <table class="summary-table">
            <tr><th>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>
        '''
        for row in summary_data_list:
            summary_table_html += f'<tr><td>{row["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"]}</td><td>{row["–ó–Ω–∞—á–µ–Ω–∏–µ"]}</td></tr>'
        summary_table_html += '</table>'
        st.markdown(summary_table_html, unsafe_allow_html=True)

with tab2:
    # --- –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ ---
    st.markdown('<div style="text-align:center; font-size:1.25em; font-weight:700; font-family:Segoe UI, Arial, sans-serif; margin-bottom:0.5em;">–ì—Ä–∞—Ñ–∏–∫ –Ω–µ—Å—É—â–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏</div>', unsafe_allow_html=True)
    if closest_data and N_final_list and times:
        chart_df = pd.DataFrame({
            "–í—Ä–µ–º—è, –º–∏–Ω": times,
            "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù": N_final_list
        })
        chart_df = chart_df.set_index("–í—Ä–µ–º—è, –º–∏–Ω").reset_index()
        # --- –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–µ–ª–∞ –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ ---
        fire_limit_time = None
        for i in range(1, len(chart_df)):
            prev = chart_df.iloc[i-1]
            curr = chart_df.iloc[i]
            if prev["–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù"] >= normative_load and curr["–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù"] < normative_load:
                t1, t2 = prev["–í—Ä–µ–º—è, –º–∏–Ω"], curr["–í—Ä–µ–º—è, –º–∏–Ω"]
                n1, n2 = prev["–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù"], curr["–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù"]
                if n1 != n2:
                    fire_limit_time = t1 + (normative_load - n1) * (t2 - t1) / (n2 - n1)
                else:
                    fire_limit_time = t1
                break
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
        line = alt.Chart(chart_df).mark_line(point=True, color="#d62728", strokeWidth=3).encode(
            x=alt.X("–í—Ä–µ–º—è, –º–∏–Ω", axis=alt.Axis(title="–í—Ä–µ–º—è –æ–≥–Ω–µ–≤–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è, –º–∏–Ω", titleFontSize=16)),
            y=alt.Y("–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù", axis=alt.Axis(title="–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù", titleFontSize=16)),
            tooltip=["–í—Ä–µ–º—è, –º–∏–Ω", "–ù–µ—Å—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∫–ù"]
        )
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        norm_line = alt.Chart(pd.DataFrame({
            "y": [normative_load],
        })).mark_rule(color="#1f77b4", strokeDash=[2,2], size=2).encode(
            y="y"
        )
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –ø—Ä–µ–¥–µ–ª–∞ –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏
        if fire_limit_time is not None:
            fire_limit_df = pd.DataFrame({
                "x": [fire_limit_time],
                "y1": [normative_load],
                "y0": [0]
            })
            fire_limit_vline = alt.Chart(fire_limit_df).mark_rule(color="#2ca02c", strokeDash=[1,0], size=3).encode(
                x="x",
                y="y1",
                y2="y0"
            )
            fire_limit_point = alt.Chart(fire_limit_df).mark_point(filled=True, color="#2ca02c", size=80).encode(
                x="x",
                y="y1"
            )
            chart = (line + norm_line + fire_limit_vline + fire_limit_point).properties(height=800).interactive()
        else:
            chart = (line + norm_line).properties(height=800).interactive()
        st.altair_chart(chart, use_container_width=True)
        # --- –õ–µ–≥–µ–Ω–¥–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º ---
        legend_html = f'''
        <div style="display:flex; flex-direction:column; align-items:center; margin-top:0.5em;">
            <div style="display:flex; align-items:center; gap:1em;">
                <span style="display:inline-block; width:24px; height:4px; background:#2ca02c; border-radius:2px;"></span>
                <span style="font-size:1em;">–ó–µ–ª—ë–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –ø—Ä–µ–¥–µ–ª –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏{f': {fire_limit_time:.1f} –º–∏–Ω' if fire_limit_time is not None else ''}</span>
            </div>
            <div style="display:flex; align-items:center; gap:1em; margin-top:0.3em;">
                <span style="display:inline-block; width:24px; height:4px; background: repeating-linear-gradient(90deg, #1f77b4, #1f77b4 8px, transparent 8px, transparent 16px); border-radius:2px;"></span>
                <span style="font-size:1em;">–°–∏–Ω—è—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {normative_load} –∫–ù</span>
            </div>
        </div>
        '''
        st.markdown(legend_html, unsafe_allow_html=True)
    elif 'fig' in locals():
        st.pyplot(fig)

with tab3:
    st.markdown("""
    ### –û –ø—Ä–æ–µ–∫—Ç–µ
    - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –æ–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ —Ç—Ä—É–±–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–Ω
    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    - –í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    - [Streamlit](https://streamlit.io/) ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤
    """)
    st.info("–î–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –°–ü –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.") 